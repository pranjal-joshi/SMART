blueprint:
  name: Occupancy-Based Control (Advanced)
  description: >
    Controls devices based on occupancy, sleep state, and advanced user conditions like presets, adaptive lighting, and fan cooldown.
  domain: automation
  input:
    area_prefix:
      name: Area Prefix
      description: Used to load context-specific scenes (e.g., bedroom, kitchen).
      selector:
        text:
    occupancy_sensor:
      name: Occupancy Sensor
      selector:
        entity:
          filter:
            - domain: binary_sensor
              device_class: occupancy
    timer_occupancy_cleared:
      name: Occupancy Timer
      selector:
        entity:
          filter:
            - domain: timer
    lights_timeout:
      name: Lights Timeout (in minutes)
      selector:
        entity:
          filter:
            - domain: input_number
    sleep_threshold:
      name: Sleep Threshold Sensor
      selector:
        entity:
          filter:
            - domain: binary_sensor
    automation_enabled:
      name: Automation Enabled
      selector:
        entity:
          filter:
            - domain: input_boolean
    motion_enabled:
      name: Motion Enabled
      selector:
        entity:
          filter:
            - domain: input_boolean
    fan_cooldown:
      name: Fan Cooldown Flag
      default: null
      selector:
        entity:
          filter:
            - domain: input_boolean
    input_datetime_lights_after:
      name: Lights After Time
      selector:
        entity:
          filter:
            - domain: input_datetime
    early_darkening:
      name: Early Darkening Override
      selector:
        entity:
          filter:
            - domain: input_boolean
    feature_auto_fan_on:
      name: Feature Toggle - Auto Fan On
      selector:
        entity:
          filter:
            - domain: input_boolean
    adaptive_lighting_entity:
      name: Adaptive Lighting Switch
      default: null
      selector:
        entity:
          filter:
            - domain: switch
    light_entities:
      name: Lights to Control
      default: []
      selector:
        target:
          entity:
            domain: light
    dimming_brightness:
      name: Dimming Brightness %
      description: Brightness to use when dimming lights (e.g., after timeout).
      default: 30
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
          mode: slider
    fan_entities:
      name: Fans to Control
      default: []
      selector:
        target:
          entity:
            domain: fan
    scene_loader_script:
      name: Scene Loader Script
      selector:
        entity:
          filter:
            - domain: script
    input_select_preset:
      name: Preset Selector
      default: null
      selector:
        entity:
          filter:
            - domain: input_select

trigger:
  - trigger: state
    entity_id: !input occupancy_sensor
    to: "on"
    id: occupied
  - trigger: state
    entity_id: !input occupancy_sensor
    to: "off"
    id: not_occupied
  - trigger: state
    entity_id: !input timer_occupancy_cleared
    from: "active"
    to: "idle"
    id: timer_cleared

condition:
  - condition: state
    entity_id: !input automation_enabled
    state: "on"
  - condition: state
    entity_id: !input motion_enabled
    state: "on"

action:
  - variables:
      area_prefix: !input area_prefix
      light_entities: !input light_entities
      fan_entities: !input fan_entities
      adaptive_lighting_entity: !input adaptive_lighting_entity
      lights_timeout: !input lights_timeout
      light_entities_on: >-
        {{ expand(light_entities.entity_id | default([]))
          | selectattr('domain', 'equalto', 'light')
          | selectattr('state', 'equalto', 'on')
          | map(attribute='entity_id')
          | list }}
      fan_entities_on: >-
        {{ expand(fan_entities.entity_id | default([]))
          | selectattr('domain', 'equalto', 'fan')
          | selectattr('state', 'equalto', 'on')
          | map(attribute='entity_id')
          | list }}
      dimming_brightness: !input dimming_brightness
      fan_cooldown: !input fan_cooldown
      input_select_preset: !input input_select_preset

  - choose:
      - conditions:
          - condition: trigger
            id: occupied
        sequence:
          - condition: template
            value_template: >
              {{ fan_cooldown is none or is_state(fan_cooldown, 'off') }}
          - action: timer.pause
            target:
              entity_id: !input timer_occupancy_cleared
          - condition: state
            entity_id: !input sleep_threshold
            state: "off"
          - condition: or
            conditions:
              - condition: time
                after: !input input_datetime_lights_after
              - condition: sun
                before: sunrise
              - condition: state
                entity_id: !input early_darkening
                state: "on"
          - if:
              - condition: template
                value_template: >
                  {{ light_entities_on | count == 0 }}
            then:
              - action: script.turn_on
                target:
                  entity_id: !input scene_loader_script
                data:
                  variables:
                    device_type: light
                    area_prefix: "{{ area_prefix }}"
          - if:
              - condition: state
                entity_id: !input feature_auto_fan_on
                state: "on"
              - condition: template
                value_template: >
                  {{ fan_entities_on | count == 0 }}
            then:
              - action: script.turn_on
                target:
                  entity_id: !input scene_loader_script
                data:
                  variables:
                    device_type: fan
                    area_prefix: "{{ area_prefix }}"
          - action: script.turn_on
            target:
              entity_id: !input scene_loader_script
            data:
              variables:
                device_type: device
                area_prefix: "{{ area_prefix }}"
          - condition: template
            value_template: >
              {% set lights = expand(light_entities.entity_id) %}
              {{ lights | selectattr('state', 'equalto', 'on') | list | count > 0 }}

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ adaptive_lighting_entity is not none }}"
                sequence:
                  - action: light.turn_on
                    target: "{{ light_entities }}"
                    data:
                      color_temp_kelvin: >-
                        {{ state_attr(adaptive_lighting_entity, 'color_temp_kelvin') }}
                      brightness_pct: >-
                        {{ state_attr(adaptive_lighting_entity, 'brightness_pct') }}
              - conditions:
                  - condition: template
                    value_template: "{{ adaptive_lighting_entity is none }}"
                sequence:
                  - action: light.turn_on
                    target: "{{ light_entities }}"

      - conditions:
          - condition: trigger
            id: not_occupied
        sequence:
          - action: timer.start
            target:
              entity_id: !input timer_occupancy_cleared
            data:
              duration: >-
                {{ (states(lights_timeout) | float * 60) | int }}
          - condition: template
            value_template: >
              {{ light_entities_on | count > 0 }}
          - condition: template
            value_template: >
              {{ input_select_preset is none or states(input_select_preset) != 'Prayer' }}
          - action: light.turn_on
            target:
              entity_id: "{{ light_entities_on }}"
            data:
              brightness_pct: "{{ dimming_brightness }}"

      - conditions:
          - condition: trigger
            id: timer_cleared
        sequence:
          - if:
              - condition: template
                value_template: "{{ fan_entities_on | count > 0 }}"
            then:
              - action: homeassistant.turn_off
                target:
                  entity_id: "{{ fan_entities_on }}"
          - condition: template
            value_template: >
              {{ input_select_preset is none or states(input_select_preset) != 'Prayer' }}
          - action: homeassistant.turn_off
            target:
              entity_id: "{{ light_entities_on }}"
mode: single
